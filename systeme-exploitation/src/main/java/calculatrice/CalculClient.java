package calculatrice;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Serializable;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.util.ArrayList;
import java.util.Date;

public class CalculClient implements  Serializable {

	private static final long serialVersionUID = 6395630201109375324L;
	CalculServer _calculServer;

	public CalculClient(String host, int port) throws RemoteException,
			NotBoundException {
		Registry registry = LocateRegistry.getRegistry(host, port);
		_calculServer = (CalculServer) (registry.lookup("calculServer"));
	}

	public void run() {
		System.out.print("Welcome to calcul client: \n"
				+ "Hints:\n"
				+ "<int> is a int \n"
				+ "<op> is operator\n"
				+ ": is a separator --required\n"
				+ "Possible commands:\n"
				+ "ADD: <int>,<int> - to add 1st operand to the second \n"
				+ "MULTIPLY: <int>,<int> - to multiply 1st operand to the second \n"
				+ "DIV: <int>,<int> - to divide 1st operand by the second \n"
				+ "MODE: <int>,<int> - to get remender from div 1st operand by the second \n"
				+ "quite - to close the client\n");

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		try {
			while (true) {

				String line = br.readLine();

				try {
					if (line.startsWith(Operation.ADD.name())
							||line.startsWith(Operation.MULTIPLY.name())
							||line.startsWith(Operation.DIV.name())
							||line.startsWith(Operation.MODE.name())) {
						
						Event e = createEventFromCommandeLigne(line);
						String res = _calculServer.calculEvent(e);
						printResult(e,res);
					
					}  else if (line.equals("quite")) {
						break;
					} else {
						System.err.println("Unknown command.");
					}
				} catch (IllegalArgumentException e) {
					System.err.println("Invalid arguments.");
				}
			}
			br.close();
		} catch (IOException e) {
			e.printStackTrace();
		}

		System.out.println("Bye.");
	}

	private void printResult(Event e, String res) {
		System.out.println("result id: "+ e.getId());
		System.out.print("request time: "+e.getBegin()+"  **  "
				+e.getOperation()+" operation for "+e.getOperande().get(0));
		for (int i = 1;i< e.getOperande().size();i++) {
			System.out.print(" and "+e.getOperande().get(i));
		}
		System.out.print(" is: " + res);
		System.out.println();
	}

	private Event createEventFromCommandeLigne(String line) {
		try {
			 Operation operation = null;
			 ArrayList<Integer> operands = new ArrayList<Integer>();
			 Date begin = new Date();
			 
			String[] parts = line.split(": ");
			if (parts.length == 2) {
				operation=Operation.valueOf(parts[0].trim());
				for (String element : parts[1].split(",")) {
					operands.add(Integer.valueOf(element.trim()));
				}
			}
			if(operands.size()<2){
				System.err.println("parsing operation & operandes from commndeLigne fail.");
				throw new IllegalArgumentException("must have minimum 2 operands");
			}
			
			return new Event(operation, operands, begin);
		} catch (Exception e) {
			System.err.println("parsing operation & operandes from commndeLigne fail.");
			throw new IllegalArgumentException(e);
		}
	}

	/**
	 * Parse list of parameters from string
	 */
	public String[] getParameters(String line, int length)
			throws IllegalArgumentException {
		String[] parts = line.split(": ");
		if (parts.length == 2) {
			String[] params = parts[1].split(",");
			if (params.length == length) {
				return params;
			}
		}

		throw new IllegalArgumentException();
	}

}
